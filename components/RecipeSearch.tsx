import React, { useState } from 'react';
import { View, Text, StyleSheet, TextInput, TouchableOpacity, ScrollView, Alert } from 'react-native';
import { Search, BookOpen, Share2, Printer } from 'lucide-react-native';
import { colors } from '../constants/colors';
import { RecipeService } from '../services/recipe-service';
import { RecipeService as SupabaseRecipeService } from '../services/supabase-service';
import { SnapCarbRecipe } from '../services/gemini-ai-service';
import RecipeCard from './RecipeCard';
import appDownloadLinks from '../config/app-links';

export default function RecipeSearch() {
  const [query, setQuery] = useState('');
  const [recipe, setRecipe] = useState<SnapCarbRecipe | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSearch = async () => {
    if (!query.trim()) return;

    setLoading(true);
    setError(null);
    setRecipe(null);

    try {
      const result = await RecipeService.searchRecipe({ query: query.trim() });
      setRecipe(result);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to generate recipe');
      console.error('Recipe search error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!recipe) return;

    try {
      // For now, use a mock user ID - in production this would come from auth
      const mockUserId = 'mock-user-123';
      
      // Save recipe to database
      const recipeId = await SupabaseRecipeService.saveRecipe(recipe, mockUserId);
      
      // Add to user's collection
      await SupabaseRecipeService.addToCollection(recipeId, mockUserId, false);
      
      Alert.alert('Success!', 'Recipe saved to your collection! 🎉');
    } catch (error) {
      console.error('Error saving recipe:', error);
      Alert.alert('Error', 'Failed to save recipe. Please try again.');
    }
  };

  const handleShare = () => {
    if (!recipe) return;
    
    // Create a comprehensive share message with app download info
    const shareMessage = `🍽️ Check out this amazing SnapCarb recipe I just discovered!

${recipe.title}
${recipe.description}

⏱️ Prep: ${recipe.prepTime}min | 🍳 Cook: ${recipe.cookTime}min
🥗 Net Carbs: ${recipe.netCarbs}g | 🎯 SnapCarb Approved!

📱 Want to create your own AI-generated SnapCarb recipes?
Download the SnapCarb app and start your health journey today!

🔗 Download:
🍎 iOS: ${appDownloadLinks.ios.appStore}
🤖 Android: ${appDownloadLinks.android.playStore}
🌐 Web: ${appDownloadLinks.web.downloadPage}

#SnapCarb #HealthyEating #AICooking #LowCarb`;

    // In a real app, this would use React Native's Share API
    // For now, show the share message in an alert
    Alert.alert(
      'Share Recipe', 
      'Share this recipe with friends and family!',
      [
        { text: 'Copy Message', onPress: () => {
          // In a real app, this would copy to clipboard
          Alert.alert('Copied!', 'Recipe details copied to clipboard');
        }},
        { text: 'Cancel', style: 'cancel' }
      ]
    );
  };

  const handlePrint = () => {
    if (!recipe) return;
    
    // Create a print-friendly recipe format
    const printContent = `
╔══════════════════════════════════════════════════════════════╗
║                    SNAP CARB RECIPE                          ║
║                                                              ║
║  ${recipe.title.toUpperCase().padEnd(50)}  ║
║                                                              ║
║  ${recipe.description.padEnd(50)}  ║
║                                                              ║
║  ⏱️  Prep Time: ${recipe.prepTime} minutes                    ║
║  🍳  Cook Time: ${recipe.cookTime} minutes                  ║
║  🥗  Net Carbs: ${recipe.netCarbs}g                         ║
║  🎯  SnapCarb Approved!                                     ║
║                                                              ║
║  INGREDIENTS:                                                ║
${recipe.ingredients.map(ing => `║  • ${ing}`).join('\n')}
║                                                              ║
║  INSTRUCTIONS:                                               ║
${recipe.instructions.map((step, i) => `║  ${i + 1}. ${step}`).join('\n')}
║                                                              ║
║  📱  Generated by SnapCarb AI                               ║
║  🔗  Download: ${appDownloadLinks.web.downloadPage}         ║
║                                                              ║
╚══════════════════════════════════════════════════════════════╝`;

    // In a real app, this would generate a PDF and use print functionality
    Alert.alert(
      'Print Recipe', 
      'Print this recipe for your kitchen!',
      [
        { text: 'View Print Preview', onPress: () => {
          Alert.alert('Print Preview', printContent, [
            { text: 'Print', onPress: () => Alert.alert('Success', 'Recipe sent to printer!') },
            { text: 'Cancel', style: 'cancel' }
          ]);
        }},
        { text: 'Cancel', style: 'cancel' }
      ]
    );
  };

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      {/* Search Section */}
      <View style={styles.searchSection}>
        <Text style={styles.searchTitle}>Find Your Perfect Recipe</Text>
        <Text style={styles.searchSubtitle}>
          Search for any dish and our AI will create a unique, SnapCarb-approved recipe just for you!
        </Text>
        
        <View style={styles.searchContainer}>
          <TextInput
            style={styles.searchInput}
            placeholder="Try: 'fish pie', 'sauerkraut', 'lasagne'..."
            placeholderTextColor={colors.textSecondary}
            value={query}
            onChangeText={setQuery}
            onSubmitEditing={handleSearch}
          />
          <TouchableOpacity 
            style={[styles.searchButton, loading && styles.searchButtonDisabled]}
            onPress={handleSearch}
            disabled={loading}
          >
            <Search size={20} color={colors.background} />
            <Text style={styles.searchButtonText}>
              {loading ? 'Creating...' : 'Find Recipe'}
            </Text>
          </TouchableOpacity>
        </View>

        {error && (
          <View style={styles.errorContainer}>
            <Text style={styles.errorText}>{error}</Text>
          </View>
        )}
      </View>

      {/* Recipe Results */}
      {recipe && (
        <View style={styles.recipeSection}>
          <View style={styles.recipeHeader}>
            <Text style={styles.recipeTitle}>Your AI-Generated Recipe</Text>
            <Text style={styles.recipeSubtitle}>
              A unique, chef-quality recipe created just for you!
            </Text>
          </View>

          <RecipeCard recipe={recipe} />

          {/* Action Buttons */}
          <View style={styles.actionButtons}>
            <TouchableOpacity style={styles.actionButton} onPress={handleSave}>
              <BookOpen size={20} color={colors.background} />
              <Text style={styles.actionButtonText}>Save to Collection</Text>
            </TouchableOpacity>
            
            <TouchableOpacity style={styles.actionButton} onPress={handleShare}>
              <Share2 size={20} color={colors.background} />
              <Text style={styles.actionButtonText}>Share</Text>
            </TouchableOpacity>
            
            <TouchableOpacity style={styles.actionButton} onPress={handlePrint}>
              <Printer size={20} color={colors.background} />
              <Text style={styles.actionButtonText}>Print</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      {/* Tips Section */}
      <View style={styles.tipsSection}>
        <Text style={styles.tipsTitle}>💡 Recipe Search Tips</Text>
        <Text style={styles.tipText}>
          • Be specific: "grass-fed beef lasagne" instead of just "lasagne"
        </Text>
        <Text style={styles.tipText}>
          • Include cooking style: "quick breakfast", "gourmet dinner"
        </Text>
        <Text style={styles.tipText}>
          • Mention dietary needs: "low-carb", "high-protein", "fermented"
        </Text>
        <Text style={styles.tipText}>
          • Every search creates a unique recipe - no repeats!
        </Text>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  searchSection: {
    padding: 20,
    paddingTop: 30,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  searchTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 8,
  },
  searchSubtitle: {
    fontSize: 16,
    color: '#6B7280',
    lineHeight: 22,
  },
  searchContainer: {
    flexDirection: 'row',
    backgroundColor: '#F9FAFB',
    borderRadius: 12,
    paddingHorizontal: 16,
    marginTop: 16,
  },
  searchInput: {
    flex: 1,
    fontSize: 16,
    color: '#1F2937',
    paddingVertical: 16,
  },
  searchButton: {
    backgroundColor: '#10B981',
    paddingVertical: 16,
    paddingHorizontal: 12,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
  },
  searchButtonText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
    marginLeft: 8,
  },
  searchButtonDisabled: {
    opacity: 0.7,
  },
  errorContainer: {
    backgroundColor: '#FEE2E2',
    borderRadius: 12,
    padding: 16,
    marginTop: 16,
  },
  errorText: {
    fontSize: 14,
    color: '#991B1B',
    textAlign: 'center',
  },
  recipeSection: {
    padding: 20,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  recipeHeader: {
    marginBottom: 16,
  },
  recipeTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1F2937',
    marginBottom: 8,
  },
  recipeSubtitle: {
    fontSize: 16,
    color: '#6B7280',
    lineHeight: 22,
  },
  actionButtons: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 20,
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#10B981',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 12,
  },
  actionButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginLeft: 8,
  },
  tipsSection: {
    padding: 20,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  tipsTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 16,
  },
  tipText: {
    fontSize: 14,
    color: '#4B5563',
    lineHeight: 22,
    marginBottom: 12,
  },
});
